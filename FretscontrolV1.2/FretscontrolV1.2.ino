#include <USBKeyboard.h>
#define LAYOUT LAYOUT_US
  
USBKeyboard control = USBKeyboard();  

const uint8_t fretsPin[]={NULL,A0,A1,A2,A3,3,6,7,8}; //Frets Pin
const uint8_t led[]={NULL,13,12,11,10,9};    ///LED Pin
const uint8_t x=A4, //pin X Joy
              y=A5; //pin Y Joy                   
int xState =0;
int yState =0; 
 
uint8_t ledMode = 0 ;

byte aniLed1[] = {B0100000,B0010000,B0001000,B0000100,B0000010,B00000000,B0100000,B0010000,B0001000,B0000100,B0000010,B00000000};
byte aniLed2[] = {B0000010,B0000100,B0001000,B0010000,B0100000,B00000000,B0100000,B0010000,B0001000,B0000100,B0000010,B00000000};
byte aniLed3[] = {B0000000,B0010000,B0001000,B0000100,B0000010,B00000000,B0000010,B0000100,B0001000,B0010000,B0100000,B00000000};
byte aniLed4[] = {B0101010,B0010100,B0101010,B0010100,B0101010,B0010100,B0101010,B0010100,B0101010,B0010100,B0101010,B0010100};
byte aniLed5[] = {B0100010,B0010100,B0001000,B0010100,B0100010,B00000000,B0100010,B0010100,B0001000,B0010100,B0100010,B00000000};
uint8_t counter =0 ;

    
void setup() {
Serial.begin(9600);
for(uint8_t i = 1; i<=8;i++){
    pinMode(fretsPin[i],INPUT_PULLUP);
    digitalWrite(fretsPin[i],1);
   }
for(uint8_t i = 1; i<=5;i++){
pinMode(led[i],OUTPUT);    
    }

TIMSK0 = 0;
}

     
                                                                                                                                                                                                                                                                                                                                                                           
uint16_t waktu =0;
uint8_t kecepatan=10;

void loop() {
  
control.update();


     
  if(waktu >=kecepatan){ //this 10  turn a blink clock ,i dont know cant use millis for multitask;
     waktu = 0;
  }else{waktu++;}

  if(counter >=11){
     counter = 0;
  }else{
    if(waktu == 0){
       if(ledMode==6 ){
         kecepatan = 4;
         counter = random(0,5);
       }else{
        kecepatan = 10;
        counter++;}    
      }
   }

satu();
dua();
tiga();
empat();
lima();
enam();
Start();
Select();
upDownRightLeft();

                                                                                                                                                                         
delayMicroseconds(20000);
}
                                                                                                                                                                                             

void jika(int X,int Y,bool a,bool b,bool c,bool d,bool e,bool f ,bool g, bool h,uint8_t key1,uint8_t key2,uint8_t key3){

keyClear();


if(analogRead(x) < 100){xState = -1;}
  else if(analogRead(x) > 900){xState = 1;}
  else if(analogRead(x) > 100 && analogRead(x)< 900){xState = 0;}
if(analogRead(y) < 100){yState = 1;}
  else if(analogRead(y) > 900){yState = -1;}           
  else if(analogRead(y) > 100 && analogRead(y)< 900){yState = 0;}

if(xState == X  && yState == Y &&digitalRead(fretsPin[1]) == a && digitalRead(fretsPin[2]) == b && digitalRead(fretsPin[3]) == c && digitalRead(fretsPin[4]) == d
&& digitalRead(fretsPin[5]) == e && digitalRead(fretsPin[6]) == f &&  digitalRead(fretsPin[7]) == g && digitalRead(fretsPin[8]) == h){
   control.sendReport(0, key1, key2, key3, 0, 0, 0);};
   
  if(digitalRead(fretsPin[6]) == 0){
    if(ledMode >=6){
      ledMode = 0;
    }else{
      ledMode++;}
  }
  

switch(ledMode){
  case 0 :
if(digitalRead(fretsPin[1])==0){digitalWrite(led[1],1);}else{digitalWrite(led[1],0);};
if(digitalRead(fretsPin[2])==0){digitalWrite(led[2],1);}else{digitalWrite(led[2],0);};
if(digitalRead(fretsPin[3])==0){digitalWrite(led[3],1);}else{digitalWrite(led[3],0);};
if(digitalRead(fretsPin[4])==0){digitalWrite(led[4],1);}else{digitalWrite(led[4],0);};
if(digitalRead(fretsPin[5])==0){digitalWrite(led[5],1);}else{digitalWrite(led[5],0);};
  break;
  case 1 :
setLed(aniLed1[counter]);
  break;
  case 2 :
setLed(aniLed2[counter]);
  break;
  case 3:
setLed(aniLed3[counter]);
  break;
  case 4:
setLed(aniLed4[counter]);
  break;
  case 5 :
setLed(aniLed5[counter]);
  break;
  case 6 :
setLed(aniLed1[counter]);
  break;
  default :
  break;
  }

}

void satu(){
jika(0,0,0,1,1,1,1,1,1,1,30,0,0);
jika(0,0,0,0,1,1,1,1,1,1,30,31,0);
jika(0,0,0,1,0,1,1,1,1,1,30,32,0);
jika(0,0,0,1,1,0,1,1,1,1,30,33,0);
jika(0,0,0,1,1,1,0,1,1,1,30,34,0);
jika(0,0,0,1,1,1,1,0,1,1,30,35,0);
jika(0,0,0,1,1,1,1,1,0,1,30,40,0);
jika(0,0,0,1,1,1,1,1,1,0,30,44,0);///
jika(-1,0,0,1,1,1,1,1,1,1,30,80,0);
jika(1,0,0,1,1,1,1,1,1,1,30,79,0);
jika(0,-1,0,1,1,1,1,1,1,1,30,81,0);
jika(0,1,0,1,1,1,1,1,1,1,30,82,0);///
jika(0,0,0,0,1,1,1,1,1,0,30,31,44);
jika(0,0,0,1,0,1,1,1,1,0,30,32,44);
jika(0,0,0,1,1,0,1,1,1,0,30,33,44);
jika(0,0,0,1,1,1,0,1,1,0,30,34,44);
jika(0,0,0,1,1,1,1,0,1,0,30,35,44);
jika(0,0,0,1,1,1,1,1,0,0,30,40,44);
jika(-1,0,0,1,1,1,1,1,1,0,30,80,44);
jika(1,0,0,1,1,1,1,1,1,0,30,79,44);
jika(0,-1,0,1,1,1,1,1,1,0,30,81,44);
jika(0,1,0,1,1,1,1,1,1,0,30,82,44);///
jika(0,0,0,0,1,1,1,1,0,1,30,31,40);
jika(0,0,0,1,0,1,1,1,0,1,30,32,40);
jika(0,0,0,1,1,0,1,1,0,1,30,33,40);
jika(0,0,0,1,1,1,0,1,0,1,30,34,40);
jika(0,0,0,1,1,1,1,0,0,1,30,35,40);
jika(0,0,0,1,1,1,1,1,0,0,30,44,40);//

jika(-1,0,0,0,1,1,1,1,0,1,30,31,80);
jika(-1,0,0,1,0,1,1,1,0,1,30,32,80);
jika(-1,0,0,1,1,0,1,1,0,1,30,33,80);
jika(-1,0,0,1,1,1,0,1,0,1,30,34,80);
jika(-1,0,0,1,1,1,1,0,0,1,30,35,80);

jika(1,0,0,0,1,1,1,1,0,1,30,31,79);
jika(1,0,0,1,0,1,1,1,0,1,30,32,79);
jika(1,0,0,1,1,0,1,1,0,1,30,33,79);
jika(1,0,0,1,1,1,0,1,0,1,30,34,79);
jika(1,0,0,1,1,1,1,0,0,1,30,35,79);

jika(0,-1,0,0,1,1,1,1,0,1,30,31,81);
jika(0,-1,0,1,0,1,1,1,0,1,30,32,81);
jika(0,-1,0,1,1,0,1,1,0,1,30,33,81);
jika(0,-1,0,1,1,1,0,1,0,1,30,34,81);
jika(0,-1,0,1,1,1,1,0,0,1,30,35,81);

jika(0,1,0,0,1,1,1,1,0,1,30,31,82);
jika(0,1,0,1,0,1,1,1,0,1,30,32,82);
jika(0,1,0,1,1,0,1,1,0,1,30,33,82);
jika(0,1,0,1,1,1,0,1,0,1,30,34,82);
jika(0,1,0,1,1,1,1,0,0,1,30,35,82);

}
void dua(){
jika(0,0,1,0,1,1,1,1,1,1,31,0,0);///
jika(0,0,1,0,0,1,1,1,1,1,31,32,0);
jika(0,0,1,0,1,0,1,1,1,1,31,33,0);
jika(0,0,1,0,1,1,0,1,1,1,31,34,0);
jika(0,0,1,0,1,1,1,0,1,1,31,35,0);
jika(0,0,1,0,1,1,1,1,0,1,31,40,0);
jika(0,0,1,0,1,1,1,1,1,0,31,44,0);///
jika(-1,0,1,0,1,1,1,1,1,1,31,80,0);
jika(1,0,1,0,1,1,1,1,1,1,31,79,0);
jika(0,-1,1,0,1,1,1,1,1,1,31,81,0);
jika(0,1,1,0,1,1,1,1,1,1,31,82,0);///
jika(0,0,1,0,0,1,1,1,1,0,31,32,44);
jika(0,0,1,0,1,0,1,1,1,0,31,33,44);
jika(0,0,1,0,1,1,0,1,1,0,31,34,44);
jika(0,0,1,0,1,1,1,0,1,0,31,35,44);
jika(0,0,1,0,1,1,1,1,0,0,31,40,44);///
jika(0,0,1,0,0,1,1,1,0,1,31,32,40);
jika(0,0,1,0,1,0,1,1,0,1,31,33,40);
jika(0,0,1,0,1,1,0,1,0,1,31,34,40);
jika(0,0,1,0,1,1,1,0,0,1,31,35,40);
jika(0,0,1,0,1,1,1,1,0,0,31,44,40);//
jika(-1,0,1,0,0,1,1,1,0,1,31,32,80);
jika(-1,0,1,0,1,0,1,1,0,1,31,33,80);
jika(-1,0,1,0,1,1,0,1,0,1,31,34,80);
jika(-1,0,1,0,1,1,1,0,0,1,31,35,80);

jika(1,0,1,0,0,1,1,1,0,1,31,32,79);
jika(1,0,1,0,1,0,1,1,0,1,31,33,79);
jika(1,0,1,0,1,1,0,1,0,1,31,34,79);
jika(1,0,1,0,1,1,1,0,0,1,31,35,79);

jika(0,-1,1,0,0,1,1,1,0,1,31,32,81);
jika(0,-1,1,0,1,0,1,1,0,1,31,33,81);
jika(0,-1,1,0,1,1,0,1,0,1,31,34,81);

jika(0,1,1,0,0,1,1,1,0,1,31,32,82);
jika(0,1,1,0,1,0,1,1,0,1,31,33,82);
jika(0,1,1,0,1,1,0,1,0,1,31,34,82);
jika(0,1,1,0,1,1,1,0,0,1,31,35,82);
}
void tiga(){
jika(0,0,1,1,0,1,1,1,1,1,32,0,0);///
jika(0,0,1,1,0,0,1,1,1,1,32,33,0);
jika(0,0,1,1,0,1,0,1,1,1,32,34,0);
jika(0,0,1,1,0,1,1,0,1,1,32,35,0);
jika(0,0,1,1,0,1,1,1,0,1,32,40,0);
jika(0,0,1,1,0,1,1,1,1,0,32,44,0);//
jika(-1,0,1,1,0,1,1,1,1,1,32,80,0);
jika(1,0,1,1,0,1,1,1,1,1,32,79,0);
jika(0,-1,1,1,0,1,1,1,1,1,32,81,0);
jika(0,1,1,1,0,1,1,1,1,1,32,82,0);///
jika(0,0,1,1,0,0,1,1,1,0,32,33,44);
jika(0,0,1,1,0,1,0,1,1,0,32,34,44);
jika(0,0,1,1,0,1,1,0,1,0,32,35,44);
jika(0,0,1,1,0,1,1,1,0,0,32,40,44);///
jika(0,0,1,1,0,0,1,1,0,1,32,33,40);
jika(0,0,1,1,0,1,0,1,0,1,32,34,40);
jika(0,0,1,1,0,1,1,0,0,1,32,35,40);
jika(0,0,1,1,0,1,1,1,0,0,32,44,40);//

jika(-1,0,1,1,0,0,1,1,0,1,32,33,80);
jika(-1,0,1,1,0,1,0,1,0,1,32,34,80);
jika(-1,0,1,1,0,1,1,0,0,1,32,35,80);


jika(1,0,1,1,0,0,1,1,0,1,32,33,79);
jika(1,0,1,1,0,1,0,1,0,1,32,34,79);
jika(1,0,1,1,0,1,1,0,0,1,32,35,79);


jika(0,-1,1,1,0,0,1,1,0,1,32,33,81);
jika(0,-1,1,1,0,1,0,1,0,1,32,34,81);
jika(0,-1,1,1,0,1,1,0,0,1,32,35,81);

jika(0,1,1,1,0,0,1,1,0,1,32,33,82);
jika(0,1,1,1,0,1,0,1,0,1,32,34,82);
jika(0,1,1,1,0,1,1,0,0,1,32,35,82);

}
void empat(){
jika(0,0,1,1,1,0,1,1,1,1,33,0,0);///
jika(0,0,1,1,1,0,0,1,1,1,33,34,0);  
jika(0,0,1,1,1,0,1,0,1,1,33,35,0);
jika(0,0,1,1,1,0,1,1,0,1,33,40,0);
jika(0,0,1,1,1,0,1,1,1,0,33,44,0);///
jika(-1,0,1,1,1,0,1,1,1,1,33,80,0);
jika(1,0,1,1,1,0,1,1,1,1,33,79,0);
jika(0,-1,1,1,1,0,1,1,1,1,33,81,0);
jika(0,1,1,1,1,0,1,1,1,1,33,82,0);///

jika(0,0,1,1,1,0,0,1,1,0,33,34,44);
jika(0,0,1,1,1,0,1,0,1,0,33,35,44);
jika(0,0,1,1,1,0,1,1,0,0,33,40,44);///
jika(0,0,1,1,1,0,0,1,0,1,33,34,40);
jika(0,0,1,1,1,0,1,0,0,1,33,35,40);
jika(0,0,1,1,1,0,1,1,0,0,33,44,40);//

jika(-1,0,1,1,1,0,0,1,0,1,33,34,80);
jika(-1,0,1,1,1,0,1,0,0,1,33,35,80);


jika(1,0,1,1,1,0,0,1,0,1,33,34,79);
jika(1,0,1,1,1,0,1,0,0,1,33,35,79);


jika(0,-1,1,1,1,0,0,1,0,1,33,34,81);
jika(0,-1,1,1,1,0,1,0,0,1,33,35,81);

jika(0,1,1,1,1,0,0,1,0,1,33,34,82);
jika(0,1,1,1,1,0,1,0,0,1,33,35,82);

}


void lima(){
jika(0,0,1,1,1,1,0,1,1,1,34,0,0);///

jika(0,0,1,1,1,1,0,0,1,1,34,35,0);
jika(0,0,1,1,1,1,0,1,0,1,34,40,0);
jika(0,0,1,1,1,1,0,1,1,0,34,44,0);///
jika(0,0,1,1,1,1,0,0,1,0,34,35,44);
jika(0,0,1,1,1,1,0,1,0,0,34,40,44);
jika(0,0,1,1,1,1,0,0,0,1,34,35,40);
jika(0,0,1,1,1,1,0,1,0,0,34,44,40);//
jika(-1,0,1,1,1,1,0,1,1,1,34,80,0);
jika(1,0,1,1,1,1,0,1,1,1,34,79,0);
jika(0,-1,1,1,1,1,0,1,1,1,34,81,0);
jika(0,1,1,1,1,1,0,1,1,1,34,82,0);///

jika(-1,0,1,1,1,0,1,0,0,1,34,35,80);
jika(1,0,1,1,1,1,0,0,0,1,34,35,79);
jika(0,-1,1,1,1,1,0,0,0,1,34,35,81);
jika(0,1,1,1,1,1,0,0,0,1,34,35,82);

}

void enam(){
jika(0,0,1,1,1,1,1,0,1,1,35,0,0);///
jika(0,0,1,1,1,1,1,0,0,1,35,40,0);
jika(0,0,1,1,1,1,1,0,0,0,35,44,40);//
jika(-1,0,1,1,1,1,1,0,1,1,35,80,0);
jika(1,0,1,1,1,1,1,0,1,1,35,79,0);
jika(0,-1,1,1,1,1,1,0,1,1,35,81,0);
jika(0,1,1,1,1,1,1,0,1,1,35,82,0);///

}
void Start(){
jika(0,0,1,1,1,1,1,1,0,1,40,0,0);///
}
void Select(){
jika(0,0,1,1,1,1,1,1,1,0,44,0,0);///
}
void upDownRightLeft(){
jika(1,0,1,1,1,1,1,1,1,0,79,0,0);///
jika(-1,0,1,1,1,1,1,1,1,0,80,0,0);///
jika(0,1,1,1,1,1,1,1,1,0,82,0,0);///
jika(0,-1,1,1,1,1,1,1,1,0,81,0,0);///
}

     
void keyClear(){
if(xState == 0 && yState ==0 && digitalRead(fretsPin[1]) == 1 && digitalRead(fretsPin[2]) == 1 && digitalRead(fretsPin[3]) == 1 && digitalRead(fretsPin[4]) == 1
&& digitalRead(fretsPin[5]) == 1 && digitalRead(fretsPin[6]) ==1 &&  digitalRead(fretsPin[7]) == 1 && digitalRead(fretsPin[8]) == 1){
    control.sendReport(0,0, 0, 0, 0, 0, 0);}
    
}

void setLed(byte ledByte){
  bool bitset;
    for(uint8_t i = 1 ;i <=5;i ++){
     bitset = bitRead(ledByte,i);
     digitalWrite(led[i],bitset);
    }
}
